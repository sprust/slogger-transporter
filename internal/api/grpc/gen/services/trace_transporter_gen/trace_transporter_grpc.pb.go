// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: internal/api/grpc/proto/trace_transporter.proto

package trace_transporter_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TraceTransporter_Create_FullMethodName = "/slogger_transporter.TraceTransporter/Create"
	TraceTransporter_Update_FullMethodName = "/slogger_transporter.TraceTransporter/Update"
)

// TraceTransporterClient is the client API for TraceTransporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraceTransporterClient interface {
	Create(ctx context.Context, in *TraceTransporterCreateRequest, opts ...grpc.CallOption) (*TraceTransporterResponse, error)
	Update(ctx context.Context, in *TraceTransporterUpdateRequest, opts ...grpc.CallOption) (*TraceTransporterResponse, error)
}

type traceTransporterClient struct {
	cc grpc.ClientConnInterface
}

func NewTraceTransporterClient(cc grpc.ClientConnInterface) TraceTransporterClient {
	return &traceTransporterClient{cc}
}

func (c *traceTransporterClient) Create(ctx context.Context, in *TraceTransporterCreateRequest, opts ...grpc.CallOption) (*TraceTransporterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TraceTransporterResponse)
	err := c.cc.Invoke(ctx, TraceTransporter_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceTransporterClient) Update(ctx context.Context, in *TraceTransporterUpdateRequest, opts ...grpc.CallOption) (*TraceTransporterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TraceTransporterResponse)
	err := c.cc.Invoke(ctx, TraceTransporter_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceTransporterServer is the server API for TraceTransporter service.
// All implementations must embed UnimplementedTraceTransporterServer
// for forward compatibility.
type TraceTransporterServer interface {
	Create(context.Context, *TraceTransporterCreateRequest) (*TraceTransporterResponse, error)
	Update(context.Context, *TraceTransporterUpdateRequest) (*TraceTransporterResponse, error)
	mustEmbedUnimplementedTraceTransporterServer()
}

// UnimplementedTraceTransporterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTraceTransporterServer struct{}

func (UnimplementedTraceTransporterServer) Create(context.Context, *TraceTransporterCreateRequest) (*TraceTransporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTraceTransporterServer) Update(context.Context, *TraceTransporterUpdateRequest) (*TraceTransporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTraceTransporterServer) mustEmbedUnimplementedTraceTransporterServer() {}
func (UnimplementedTraceTransporterServer) testEmbeddedByValue()                          {}

// UnsafeTraceTransporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraceTransporterServer will
// result in compilation errors.
type UnsafeTraceTransporterServer interface {
	mustEmbedUnimplementedTraceTransporterServer()
}

func RegisterTraceTransporterServer(s grpc.ServiceRegistrar, srv TraceTransporterServer) {
	// If the following call pancis, it indicates UnimplementedTraceTransporterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TraceTransporter_ServiceDesc, srv)
}

func _TraceTransporter_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceTransporterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceTransporterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TraceTransporter_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceTransporterServer).Create(ctx, req.(*TraceTransporterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraceTransporter_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceTransporterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceTransporterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TraceTransporter_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceTransporterServer).Update(ctx, req.(*TraceTransporterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TraceTransporter_ServiceDesc is the grpc.ServiceDesc for TraceTransporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TraceTransporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slogger_transporter.TraceTransporter",
	HandlerType: (*TraceTransporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TraceTransporter_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TraceTransporter_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/grpc/proto/trace_transporter.proto",
}
